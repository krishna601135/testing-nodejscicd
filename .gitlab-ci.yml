workflow:
  rules: 
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always
variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  IMAGE_TAG: "2.0"
  DEV_ENDPOINT: http://ec2-3-86-186-17.compute-1.amazonaws.com:3000


stages:
  - test
  - build
  - deploy

run_unit_tests:
  stage: test
  image: node:17-alpine3.14
  cache:
    key: $CI_COMMIT_REF_NAME
    paths:
      - app/node_modules/

  tags:
    - docker788
  
  before_script:
    - cd app
    - npm install

  script:
    - npm test
  artifacts:
    when: always
    paths:
       - app/junit.xml
    reports:
      junit: app/junit.xml

run_lint_checks:
  stage: test
  tags:
    - docker788
  cache:
    key: $CI_COMMIT_REF_NAME
    paths:
      - app/node_modules/
    policy: pull
  before_script:
    - cd app
    - npm install
  script:
    - echo "Running lint checks"

build_image:
  stage: build
  tags:
    - shell788
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .

push_image:
  stage: build
  needs:
    - build_image
  tags:
    - shell788
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push $IMAGE_NAME:$IMAGE_TAG

deploy_to_dev:
  stage: deploy
  tags:
    - shell788
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
  script:
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yaml ubuntu@3.86.186.17:/home/ubuntu
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ubuntu@3.86.186.17 "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        docker-compose -f docker-compose.yaml down &&
        docker-compose -f docker-compose.yaml up -d"
  
  environment:
    name: Development
    url: $DEV_ENDPOINT

  






 
